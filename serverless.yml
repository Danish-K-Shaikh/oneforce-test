service: serverless-boilerplate

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or falls back to what we have set in the provider section.
  stage: ${opt:stage, 'offline'}
  region: ${opt:region, 'ap-south-1'}
  bundle:
    linting: false
  serverless-offline:
    httpPort: 4000
    noPrependStageInUrl: true
    reloadHandler: true
  resource:
    UserTable: user

provider:
  name: aws
  runtime: nodejs16.x
  memorySize: 512
  timeout: 10
  logRetentionInDays: 90
  logs:
    httpApi: true
  httpApi:
    # metrics: true # Enable if you need
    cors: true
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:*
      Resource: "*"

layers:
  nodeModules:
    path: layer/nodejs
    name: NodeModules
    description: All the node_modules will be added here (npm install and custom added)
    compatibleRuntimes:
      - nodejs16.x
    retain: false
    allowedAccounts:
      - '*' # ALL accounts!


functions:
  app:
    handler: src/handler.handler
    # reservedConcurrency: 100
    events:
      - httpApi:
          path: "/{proxy+}"
          method: "*"

resources:
  Resources:
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.resource.UserTable}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
          - AttributeName: dateJoined
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: dateJoinedIndex
            KeySchema:
              - AttributeName: dateJoined
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

package:
  individually: true
  exclude:
    - node_modules/**
    - .git/**
    - modules/**
    - .serverless/**
    - layer/**
    - logs/**

plugins:
  - serverless-bundle
  # - serverless-offline
  # - serverless-dynamodb-local
